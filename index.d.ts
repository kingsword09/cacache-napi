/* auto-generated by NAPI-RS */
/* eslint-disable */
/**
 * Clear the cache asynchronously
 *
 * @param cache The cache directory
 * @returns void
 * @throws Error
 * @example
 * ```no_run
 * use cacache::clear_async;
 *
 * clear_async('/path/to/cache').await
 * ```
 */
export declare function clearAsync(cache: string): Promise<void>

/**
 * Clear the cache
 *
 * @param cache The cache directory
 * @returns void
 * @throws Error
 * @example
 * ```no_run
 * use cacache::clear_sync;
 *
 * clear_sync('/path/to/cache')
 * ```
 */
export declare function clearSync(cache: string): void

/**
 * Copy a file from the cache to a new location asynchronously
 *
 * @param cache The cache directory
 * @param key The key of the file to copy
 * @param to The destination path
 * @returns void
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::copy_async('/path/to/cache', 'key', '/path/to/destination').await
 * ```
 */
export declare function copyAsync(cache: string, key: string, to: string): Promise<bigint>

/**
 * Copy a file from the cache to a new location asynchronously
 *
 * @param cache The cache directory
 * @param sri The SRI of the file to copy
 * @param to The destination path
 * @returns void
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::copy_hash_async('/path/to/cache','sha512-abcdef', '/path/to/destination').await
 * ```
 */
export declare function copyHashAsync(cache: string, sri: string, to: string): Promise<bigint>

/**
 * Copy a file from the cache to a new location
 *
 * @param cache The cache directory
 * @param sri The SRI of the file to copy
 * @param to The destination path
 * @returns void
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::copy_hash_sync('/path/to/cache', 'sha512-abcdef', '/path/to/destination')
 * ```
 */
export declare function copyHashSync(cache: string, sri: string, to: string): bigint

/**
 * Copy a file from the cache to a new location asynchronously
 *
 * @param cache The cache directory
 * @param sri The SRI of the file to copy
 * @param to The destination path
 * @returns void
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::copy_hash_unchecked_async('/path/to/cache','sha512-abcdef', '/path/to/destination').await
 * ```
 */
export declare function copyHashUncheckedAsync(cache: string, sri: string, to: string): Promise<bigint>

/**
 * Copy a file from the cache to a new location
 *
 * @param cache The cache directory
 * @param sri The SRI of the file to copy
 * @param to The destination path
 * @returns void
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::copy_hash_unchecked_sync('/path/to/cache','sha512-abcdef', '/path/to/destination')
 * ```
 */
export declare function copyHashUncheckedSync(cache: string, sri: string, to: string): bigint

/**
 * Copy a file from the cache to a new location
 *
 * @param cache The cache directory
 * @param key The key of the file to copy
 * @param to The destination path
 * @returns void
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::copy_sync('/path/to/cache', 'key', '/path/to/destination')
 * ```
 */
export declare function copySync(cache: string, key: string, to: string): bigint

/**
 * Copy a file from the cache to a new location asynchronously
 *
 * @param cache The cache directory
 * @param key The key of the file to copy
 * @param to The destination path
 * @returns void
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::copy_unchecked_async('/path/to/cache', 'key', '/path/to/destination').await
 * ```
 */
export declare function copyUncheckedAsync(cache: string, key: string, to: string): Promise<bigint>

/**
 * Copy a file from the cache to a new location
 *
 * @param cache The cache directory
 * @param key The key of the file to copy
 * @param to The destination path
 * @returns void
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::copy_unchecked_sync('/path/to/cache', 'key', '/path/to/destination')
 * ```
 */
export declare function copyUncheckedSync(cache: string, key: string, to: string): bigint

/**
 * Check if an entry exists in the cache asynchronously
 *
 * @param cache The cache directory
 * @param sri The SRI of the entry
 * @returns boolean
 * @throws Error
 * @example
 * ```no_run
 * use cacache::exists_async;
 *
 * exists_async('/path/to/cache','sha512-abc123').await
 * ```
 */
export declare function existsAsync(cache: string, sri: string): Promise<boolean>

/**
 * Check if an entry exists in the cache
 *
 * @param cache The cache directory
 * @param sri The SRI of the entry
 * @returns boolean
 * @throws Error
 * @example
 * ```no_run
 * use cacache::exists_sync;
 *
 * exists_sync('/path/to/cache', 'sha512-abc123')
 * ```
 */
export declare function existsSync(cache: string, sri: string): boolean

/**
 * List all the files in the cache.
 *
 * @param cache - The cache directory.
 * @returns A list of files in the cache.
 *
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::list_sync("cache");
 * ```
 */
export declare function listSync(cache: string): Array<Metadata>

export interface Metadata {
  /** Key this entry is stored under. */
  key: string
  /** Integrity hash for the stored data. Acts as a key into {cache}/content. */
  integrity: string
  /** Timestamp in unix milliseconds when this entry was written. */
  time: bigint
  /** Size of data associated with this entry. */
  size: string
  /** Arbitrary JSON  associated with this entry. */
  metadata: string
  /** Raw metadata in binary form. Can be different from JSON metadata. */
  rawMetadata?: Array<number>
}

/**
 * @param cache The cache directory asynchronously.
 * @param key The key of the entry to get
 * @returns Metadata
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::metadata_async('/path/to/cache','abcdef').await
 * ```
 */
export declare function metadataAsync(cache: string, key: string): Promise<Metadata | null>

/**
 * @param cache The cache directory
 * @param key The key of the entry to get
 * @returns Metadata
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::metadata_sync('/path/to/cache','abcdef')
 * ```
 */
export declare function metadataSync(cache: string, key: string): Metadata | null

/**
 * read a file from the cache asynchronously
 * @param cache The cache directory
 * @param key The key of the file to read
 * @returns The file contents
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::read_async('/path/to/cache','sha512-abcdef')
 * ```
 */
export declare function readAsync(cache: string, key: string): Promise<Array<number>>

/**
 * read a file from the cache asynchronously
 * @param cache The cache directory
 * @param key The key of the file to read
 * @returns The file contents
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::read_hash_async('/path/to/cache','sha512-abcdef').await
 * ```
 */
export declare function readHashAsync(cache: string, sri: string): Promise<Array<number>>

/**
 * read a file from the cache
 * @param cache The cache directory
 * @param key The key of the file to read
 * @returns The file contents
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::read_hash_sync('/path/to/cache','sha512-abcdef')
 * ```
 */
export declare function readHashSync(cache: string, sri: string): Array<number>

/**
 * read a file from the cache
 * @param cache The cache directory
 * @param key The key of the file to read
 * @returns The file contents
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::read_sync('/path/to/cache','sha512-abcdef')
 * ```
 */
export declare function readSync(cache: string, key: string): Array<number>

/**
 * remove a file from the cache asynchronously
 * @param cache The cache directory
 * @param key The key of the file to remove
 * @returns void
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::remove_async('/path/to/cache','sha512-abcdef').await
 * ```
 */
export declare function removeAsync(cache: string, key: string): Promise<void>

/**
 * remove a file from the cache asynchronously
 * @param cache The cache directory
 * @param key The key of the file to remove
 * @returns void
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::remove_hash_async('/path/to/cache','sha512-abcdef').await
 * ```
 */
export declare function removeHashAsync(cache: string, sri: string): Promise<void>

/**
 * remove a file from the cache
 * @param cache The cache directory
 * @param key The key of the file to remove
 * @returns void
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::remove_sync('/path/to/cache','sha512-abcdef')
 * ```
 */
export declare function removeHashSync(cache: string, sri: string): void

/**
 * remove a file from the cache
 * @param cache The cache directory
 * @param key The key of the file to remove
 * @returns void
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::remove_sync('/path/to/cache','sha512-abcdef')
 * ```
 */
export declare function removeSync(cache: string, key: string): void

/**
 * write data to cacache asynchronously
 * @param cache The cacache directory
 * @param data The data to write
 * @param ops The options
 * @returns The integrity of the data
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::write_async('/path/to/cache', vec![], {algo:'sha512', key: 'hello world'}).await
 * ```
 */
export declare function writeAsync(cache: string, data: Uint8Array, ops?: WriteOptions | undefined | null): Promise<string>

export interface WriteOptions {
  algo?: string
  key?: string
}

/**
 * write data to cacache
 * @param cache The cacache directory
 * @param data The data to write
 * @param ops The options
 * @returns The integrity of the data
 * @throws Error
 * @example
 * ```no_run
 * use cacache;
 *
 * cacache::write_sync('/path/to/cache', vec![], {algo: 'sha512', key: 'hello world'})
 * ```
 */
export declare function writeSync(cache: string, data: Uint8Array, ops?: WriteOptions | undefined | null): string
